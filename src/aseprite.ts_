const fs = require('fs')
const Parser = require('binary-parser').Parser

const CLayer = 0 
const CCel = 0x2005
const CPalette = 0x2019
const CUserData = 0
const CFrameTags = 0
const CSlice = 0


function n(n) {
  return [...Array(n).keys()]
}

function aseprite_file_parse(data) {

  let i = 0

  function _short() {
    let res = data.readInt16LE(i)
    i += 2
    return res
  }

  function _byte() {
    let res = data.readUInt8(i)
    i+= 1
    return res
  }

  function word() {
    let res = data.readUInt16LE(i)
    i+= 2
    return res
  }

  function dword() {
    let res = data.readUInt32LE(i)
    i += 4
    return res
  }

  function cpalette() {

    let p_size = dword()
    let from = dword()
    let to = dword()
    n(8).map(_ => _byte())
    let colors = n(to-from+1).map(_ => {
      let has_name = word()
      let color = dword()

      if (has_name & 0xf000) {
        let len = word()
        i += len
      }
      return color
    })

    return colors
  }

  function chunk() {
    let _i = i
    let size = dword()
    let type = word()
    let res
    switch (type) {
      case CLayer:
        break
      case CCel:
        break
      case CPalette:
        res = cpalette()
        break
      case CUserData:
        break
      case CFrameTags:
        break
      case CSlice:
        break
    }
    i = _i + size

    return res
  }


  function frame() {

    let _i = i
    let nb_bytes = dword()
    let magic = word()
    let nb_chunks_old = word()
    let duration = word()
    n(2).map(_ => _byte())
    let nb_chunks_new = dword()

    let nb_chunks = (nb_chunks_old === 0xffff) ? nb_chunks_new : nb_chunks_old

    let chunks = n(nb_chunks).map(_ => chunk())

    console.log(chunks)

    i = _i + nb_bytes

    return {
      nb_bytes,
      duration,
      nb_chunks,
      chunks
    }
  }


  let file_size = dword()
  let magic     = word()
  let nb_frames = word()
  let width     = word()
  let height    = word()
  let c_depth   = word()
  let flags     = dword()
  word()
  dword()
  dword()
  _byte()
  n(3).map(_ => _byte())
  word()

  let p_width  = _byte()
  let p_height = _byte()
  let grid_x   = _short()
  let grid_y   = _short()
  let grid_w   = word()
  let grid_h   = word()
  n(84).map(_ => _byte())

  let frames = n(nb_frames).map(_ => frame())


  return {
    file_size,
    nb_frames,
    width,
    height,
    c_depth,
    flags,
    frames
  }
}

